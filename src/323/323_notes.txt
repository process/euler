Probability for 1 bit
===

1*p(first iteration) + 2*p(second iteration) + 3*p(third iteration) ...
1(1/2) + 2(1/2^2) + 3(1/2^8)...
sum formula = n *  1/2^n

result: 2/1 = 2

2 bits
======
Same 1*p(1st) + 2*p(2nd) ...
1 * (1/4)  + 2 * (5/16) + 3 * (13/64) + 4 * (29/256) + 5 * (61/1024) ...

11

00 11
01 10
01 11
10 01
10 11

00 00 11
00 01 10
00 01 11
00 10 01
00 10 11

01 00 10
01 00 11
01 01 10
01 01 11
10 00 01
10 00 11
10 10 01
10 10 11

01 0x 1x
10 x0 x1


sum formula =  n *  (2^(n+1)-3) / 4^n

result: 8/3

3 bits
======
1*(1/8) + 2*(19/64) + 3*(127/512) + 4*(631/4096)

for N=2
000 111

001 110
001 111

010 101
010 111

100 011
100 111

011 100
011 101
011 110
011 111

101 010
101 011
101 110
101 111

110 001
110 011
110 101
110 111

For N=2, B=3, 1 + (3*2) + (3*4)
n_-1 +
BC1 * 2^(B-2) +
BC2 * 2^(B-1)
(+ BC...   )

for N=3
(000) number from last time - 19
(111) ignored
(now there are 6 other new possible prefixes)
half of those (3) (the ones with 2 bit) will have 16 possible arrangements - 48
the other half (3) (the ones with 1 bits) will have 20 - 60

3 and 3 come from 3C1 and 3C2.
16 comes from 4*4...
  4 possibilities of remaining bits on last one (see 011 below)
  4 possibilities for rewriting existing 2 bits (see middle number on 011 sequence)
20 comes from 2 + 2 + (4*4)
  2 possibilities from 000
  2 possibilities from starting pair
  4*4 possibilities - (2 from next iteration having 1 bit, 2 from next having 2 bits)

001 000 110
001 000 111

001 001 110
001 001 111

001 010 100
001 010 101
001 010 110
001 010 111

001 011 100
001 011 101
001 011 110
001 011 111

001 100 010
001 100 011
001 100 110
001 100 111

001 101 010
001 101 011
001 101 110
001 101 111

011 000 100
011 000 101
011 000 110
011 000 111

011 001 100
011 001 101
011 001 111
011 001 111

011 010 100
011 010 101
011 010 110
011 010 111

011 011 100
011 011 101
011 011 111
011 011 111

For N=3,
n_-1 +
BC1 * (2^(B-1) + (B-2)^2) +  # Hmmmm....
BC2 * 2^(2N-2)  # This one seems to be confirmed by later generations

For N=4
(000) number from last time - 127
(111) ignored
(now there are 6 other new possible prefixes)
half (3) (the ones with 1 bits) will have 104 possible arrangements - 312
half (3) (the ones with 2 bit) will have 64 possible arrangements - 192

001 000 000 110
001 000 000 111

001 000 001 110
001 000 001 111

001 001 000 110
001 001 000 111

001 001 001 110
001 001 001 111

bit 3 has 2^(N-1) possible arrangements (8) for EACH other configuration

bits 1 and 2 can be

00x 00x 11x
00x 01x 10x
00x 01x 11x
00x 10x 01x
00x 10x 11x
01x 00x 10x
01x 00x 11x
01x 01x 10x
01x 01x 11x
10x 00x 01x
10x 00x 11x
10x 10x 01x
10x 10x 11x
13 * 8 = 104

throwback to N=3

00x 11x
01x 10x
01x 11x
10x 01x
10x 11x

5 * 4 = 20
Well got damn
the number of paths is possibly (2^n - 3)
let's check N=5. We expect it to be 29... i think it might end up being more
00x 00x 00x 11x
00x 00x 01x 10x
00x 00x 01x 11x
00x 00x 10x 01x
00x 00x 10x 11x
00x 01x 00x 10x
00x 01x 00x 11x
00x 01x 01x 10x
00x 01x 01x 11x
00x 10x 00x 01x
00x 10x 00x 11x
00x 10x 10x 01x
00x 10x 10x 11x

01x 00x 00x 10x
01x 00x 00x 11x
01x 00x 01x 10x
01x 00x 01x 11x
01x 01x 00x 10x
01x 01x 00x 11x
01x 01x 01x 10x
01x 01x 01x 11x

Repeat for starting [10x]...

8*2 + 13 = 29
Well I'll be damned.

so...
29 * 16 = 464 for 1 bit possibilities
2**8 = 256 for 2 bit possibilities

631 + (3*464) + (3*256) = 2791
8**5 = 32768

2791/32768

Let's check experimentally
...
Holy shit! It worked!!


So for B=3:

Sum[1 to infinity]:  n * (num_n-1 + (BC1*(2^n-3)*(2^(n-1))) + (BC2*2^(2n-2)))/((2**B)^n)
where
B = 3
num_n = numerator of the nth term
num_0 = 1

Not as pretty as the below formula, but it works and we can derive it ourselves.

from oeis:
3*(2^n-2)*(2^n-1)+1

sum formula = n * (3*(2^n-2)*(2^n-1)+1) / 8^n
result: 22/7

4 bits
======
1*(1/16) + 2*(65/256) + 3*(1105/4096)

For N=2
0000 1111

0001 111x

0011 11xx

0111 1xxx

1 possibility for (000)
(111) ignored
8 possibilities for 1 bit (4c1 * 2)
24 possibilities for 2 bit (4c2 * 4)
32 possibilities for 3 bit (4c3 * 8)

For N=3

0001 000x 111x (4)
0001 001x 11xx (8)
0001 010x 1x1x (8)
0001 100x x11x (8)
0001 011x 1xxx (16)
0001 101x x1xx (16)
0001 110x xx1x (16)

0011 00xx 11xx (16)
0011 01xx 1xxx (32)
0011 10xx x1xx (32)

0111 0xxx 1xxx

B=4    B=3
0      0
3      2
6      4
9      6
12     8

(B-1)(N-1)

65 from 000
304 for 1 bit (4c1 * 76)
480 for 2 bit (4c2 * 5 * 2^4)
256 for 3 (B-1) bit (4c3 * 2^((B-1)(N-1)))

1105

For N=4

0001 000x 000x 111x
0001 000x 001x 11xx

(Hold up... This looks like recreating a pattern from B=3)
(But now there are more bits in the mix, which causes the exponential growth for B)
(Can there be a generalized formula that adds in extra bits to 2^n...)

(Hmmm. The real question is, how many unique paths from 0000 to 1111, given N iterations)
(From those paths, we can generate counts of extra sequences)

For N=1, one path
For N=2,

0001 111x (x 4c1)
0011 11xx (x 4c2)
0111 1xxx (x 4c3)

(I feel like I'm going in circles here)

(Should be able to run recursive algorithm on this shit somehow)
(Then take the values from that algorithm and apply the exponents based on B)
(Then we can get the numerator super fast)
(From there, we *might* be able to simplify to a formula, but I don't have hope)
(For example, for B=4,N=3,Prefix=0001 the internal step is B=3,N=2)
